{"version":3,"sources":["types/fetch-state.ts","types/quiz-state.ts","types/index.ts","redux/action-types/index.ts","redux/actions/index.ts","services/question-service.ts","redux/selectors/index.ts","components/footer.tsx","components/header.tsx","components/loader.tsx","components/main.tsx","components/start-quiz-button.tsx","components/toast-message.tsx","pages/quiz.tsx","pages/result.tsx","pages/home.tsx","pages/error.tsx","pages/index.tsx","App.tsx","redux/reducers/answers-reducer.ts","redux/reducers/fetch-state-reducer.ts","redux/reducers/question-index-reducer.ts","redux/reducers/questions-reducer.ts","redux/reducers/quiz-state-reducer.ts","redux/reducers/server-error-reducer.ts","redux/reducers/index.ts","redux/store/index.ts","reportWebVitals.ts","index.tsx"],"names":["FetchState","QuizState","FETCH_QUESTIONS","FETCH_QUESTIONS_SERVER_ERROR","FETCH_QUESTIONS_SUCCESS","SET_ANSWER","NEXT_QUESTION","QUIZ_START","QUIZ_END","SERVER_ERROR","NO_SERVER_ERROR","fetchQuestionsDispatch","dispatch","type","axios","get","process","then","response","questions","data","results","payload","catch","getFetchState","state","fetchState","getQuizState","quizState","getQuestions","getQuestionsIndex","questionIndex","getAnswers","answers","hasServerError","serverError","Footer","children","data-test","className","Header","Loader","role","Main","StartQuizButton","label","useDispatch","onClick","ToastMessage","header","body","onClose","aria-live","aria-atomic","style","position","right","bottom","minWidth","zIndex","data-dismiss","aria-label","aria-hidden","Quiz","question","index","totalQuestions","defaultState","disabled","submitted","value","React","useState","setState","getLabelCssClasses","val","classes","correct_answer","push","join","Fragment","decode","category","level","map","i","name","id","onValueChange","htmlFor","getState","length","answer","setAnswer","Result","useSelector","score","reduce","prevScore","ResultListItem","isCorrect","fontSize","q","Home","Error","window","location","reload","Pages","IN_PROGRESS","DONE","App","initialState","AnswersReducer","action","Array","from","newAnswers","NO_STATE","FetchStateReducer","QuestionIndexReducer","QuestionsReducer","NOT_STARTED","QuizStateReducer","ServerErrorReducer","combineReducers","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","rootReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e1221cf.chunk.js","sourcesContent":["export enum FetchState {\r\n    NO_STATE = 0,\r\n    FETCH_QUESTIONS = 1,\r\n    FETCH_QUESTIONS_SERVER_ERROR = 2,\r\n    FETCH_QUESTIONS_SUCCESS = 3\r\n}","export enum QuizState {\r\n    NOT_STARTED = 1,\r\n    IN_PROGRESS = 2,\r\n    DONE = 3\r\n}","export * from \"./answer\";\r\nexport * from \"./fetch-state\";\r\nexport * from \"./question\";\r\nexport * from \"./quiz-state\";\r\nexport * from \"./test-case\";","export const FETCH_QUESTIONS = \"FETCH_QUESTIONS\";\nexport const FETCH_QUESTIONS_SERVER_ERROR = \"FETCH_QUESTIONS_SERVER_ERROR\";\nexport const FETCH_QUESTIONS_SUCCESS = \"FETCH_QUESTIONS_SUCCESS\";\nexport const SET_ANSWER = \"SET_ANSWER\";\nexport const NEXT_QUESTION = \"NEXT_QUESTION\";\nexport const QUIZ_START = \"QUIZ_START\";\nexport const QUIZ_END = \"QUIZ_END\";\nexport const SERVER_ERROR = \"SERVER_ERROR\";\nexport const NO_SERVER_ERROR = \"NO_SERVER_ERROR\";","import {AxiosResponse} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Question} from \"../../types\";\r\nimport {\r\n    FETCH_QUESTIONS,\r\n    FETCH_QUESTIONS_SERVER_ERROR,\r\n    FETCH_QUESTIONS_SUCCESS,\r\n    NEXT_QUESTION,\r\n    NO_SERVER_ERROR,\r\n    QUIZ_END,\r\n    QUIZ_START,\r\n    SET_ANSWER\r\n} from \"../action-types\";\r\nimport * as Services from \"../../services\";\r\nimport {RootState} from \"../store\";\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NO_SERVER_ERROR action\r\n * @function setNoServerError\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setNoServerError = () => (dispatch: Dispatch) => {\r\n    dispatch({type: NO_SERVER_ERROR})\r\n};\r\n\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NO_SERVER_ERROR action\r\n * @function setAnswer\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setAnswer = (index: number, answer: string) => (dispatch: Dispatch) => {\r\n    dispatch({\r\n        type: SET_ANSWER, payload: {\r\n            index, answer\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NEXT_QUESTION | QUIZ_END action\r\n * @function setNextQuestion\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setNextQuestion = () => (dispatch: Dispatch, getState: () => RootState) => {\r\n    const {questions, questionIndex}: RootState = getState();\r\n\r\n    if (questionIndex === questions.length - 1) {\r\n        dispatch({type: QUIZ_END})\r\n    } else {\r\n        dispatch({type: NEXT_QUESTION})\r\n    }\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NEXT_QUESTION action\r\n * @function setNextQuestion\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setQuizEnd = () => (dispatch: Dispatch) => {\r\n    dispatch({type: QUIZ_END})\r\n};\r\n\r\n/**\r\n * Dispatch axios action to fetch points\r\n * @param dispatch\r\n *\r\n * @return Promise\r\n */\r\nexport const fetchQuestionsDispatch = (dispatch: Dispatch): Promise<any> => {\r\n    const addQuestionsFn = (questions: Question[]): void => {\r\n        dispatch({\r\n            type: FETCH_QUESTIONS_SUCCESS,\r\n            payload: questions\r\n        });\r\n\r\n        dispatch({\r\n            type: QUIZ_START\r\n        });\r\n    };\r\n\r\n    dispatch({\r\n        type: FETCH_QUESTIONS\r\n    });\r\n\r\n    return Services.fetchQuestions().then((response: AxiosResponse) => {\r\n        addQuestionsFn(response.data.results);\r\n    }).catch(() => {\r\n        dispatch({type: FETCH_QUESTIONS_SERVER_ERROR});\r\n    });\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches ADD_POINTS action\r\n *     after axios promise resolves\r\n * @function fetchQuestions\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const fetchQuestions = () => {\r\n    return fetchQuestionsDispatch;\r\n}\r\n","import axios, {AxiosResponse} from \"axios\";\n\nconst apiUrl: string = process.env.REACT_APP_API_URL as string;\n\n/**\n * fetchQuestions function\n *\n * @return {Promise<AxiosResponse>}\n */\nexport const fetchQuestions = (): Promise<AxiosResponse> => {\n    return axios.get(apiUrl);\n};\n","import {RootState} from \"../store\";\n\nexport const getFetchState = (state: RootState) => state.fetchState;\nexport const getQuizState = (state: RootState) => state.quizState;\nexport const getQuestions = (state: RootState) => state.questions;\nexport const getQuestionsIndex = (state: RootState) => state.questionIndex;\nexport const getAnswers = (state: RootState) => state.answers;\nexport const hasServerError = (state: RootState) => state.serverError;\n","import React, {ReactNode} from \"react\";\r\n\r\nexport interface FooterProps {\r\n    children: ReactNode;\r\n}\r\n\r\n/**\r\n * Footer component - renders footer content\r\n * @function\r\n *\r\n * @param {ReactNode} children\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Footer: ({children}: FooterProps) => JSX.Element = ({children}: FooterProps): JSX.Element => {\r\n    return <footer data-test=\"component-footer\" className=\"d-flex justify-content-center p-2\">\r\n        {children}\r\n    </footer>\r\n};\r\n\r\nexport default Footer;","import React, {ReactNode} from \"react\";\r\n\r\nexport interface HeaderProps {\r\n    children: ReactNode;\r\n}\r\n\r\n/**\r\n * Header component - renders header content\r\n * @function\r\n *\r\n * @param {ReactNode} children\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Header: ({children}: HeaderProps) => JSX.Element = ({children}: HeaderProps): JSX.Element => {\r\n    return <header data-test=\"component-header\" className=\"d-flex justify-content-center p-2\">\r\n        {children}\r\n    </header>\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n/**\r\n * Loader component - renders loader\r\n * @function\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Loader: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-loader\" className=\"d-flex justify-content-center align-items-center h-100 w-100\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, {ReactNode} from \"react\";\r\n\r\nexport interface MainProps {\r\n    children: ReactNode;\r\n}\r\n\r\n/**\r\n * Main component -  renders main content\r\n * @function\r\n *\r\n * @param {ReactNode} children\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Main: ({children}: MainProps) => JSX.Element = ({children}: MainProps): JSX.Element => {\r\n    return <main data-test=\"component-main\"\r\n                 className=\"container flex-1 p-4 overflow-auto w-100 mw-100\">\r\n        {children}\r\n    </main>\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchQuestionsDispatch} from \"../redux/actions\";\r\n\r\nexport interface StartQuizButtonProps {\r\n    label: string;\r\n}\r\n\r\n/**\r\n * Component StartQuizButton -  renders start quiz button\r\n * @function\r\n *\r\n * @param {string} label\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst StartQuizButton: ({label}: StartQuizButtonProps) => JSX.Element = ({label}: StartQuizButtonProps): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    return <button data-test=\"component-start-quiz-button\" className=\"btn btn-primary\"\r\n                   onClick={() => dispatch(fetchQuestionsDispatch)}>{label}</button>\r\n};\r\n\r\nexport default StartQuizButton;","import React from \"react\";\r\n\r\nexport interface ToastMessageProps {\r\n    header: string;\r\n    body: string;\r\n    onClose: () => void;\r\n}\r\n\r\n/**\r\n * ToastMessage component - renders toast message\r\n * @function\r\n *\r\n * @param {string} header\r\n * @param {string} body\r\n * @param {() => void} onClose\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst ToastMessage: ({header, body, onClose}: ToastMessageProps) => JSX.Element = ({header, body, onClose}: ToastMessageProps): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-toast-message\" className=\"toast show fade bg-danger text-white\" role=\"alert\"\r\n             aria-live=\"assertive\" aria-atomic=\"true\"\r\n             style={{position: \"fixed\", right: \"5px\", bottom: \"5px\", minWidth: \"200px\", zIndex: 1}}>\r\n            <div className=\"toast-header bg-danger text-white\">\r\n                <strong data-test=\"toast-header\" className=\"mr-auto\">{header}</strong>\r\n                <button data-test=\"toast-close-button\" type=\"button\" className=\"ml-2 mb-1 close text-white\"\r\n                        data-dismiss=\"toast\"\r\n                        aria-label=\"Close\" onClick={() => onClose()}>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div data-test=\"toast-body\" className=\"toast-body\">\r\n                {body}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToastMessage;\r\n","import React from \"react\";\r\nimport {decode} from \"html-entities\";\r\nimport {Footer, Header, Main} from \"../components\";\r\nimport {Question} from \"../types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAnswer, setNextQuestion} from \"../redux/actions\";\r\n\r\nexport interface QuizProps {\r\n    question: Question;\r\n    index: number;\r\n    totalQuestions: number;\r\n}\r\n\r\n/**\r\n * Quiz  - renders quiz page\r\n * @function\r\n *\r\n * @param {Question} question\r\n * @param {number} index\r\n * @param {number} totalQuestions\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nexport const Quiz: ({question, index, totalQuestions}: QuizProps) => JSX.Element = ({question, index, totalQuestions}: QuizProps): JSX.Element => {\r\n    const defaultState: { disabled: boolean, submitted: boolean, value: string } = {\r\n        disabled: true,\r\n        submitted: false,\r\n        value: ''\r\n    };\r\n    const [state, setState] = React.useState(defaultState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onValueChange = (val: string): void => {\r\n        setState({...state, disabled: false, value: val});\r\n    };\r\n\r\n    const onSubmitBtnClick = (): void => {\r\n        dispatch(setAnswer(index, state.value));\r\n        setState({...state, submitted: true});\r\n    };\r\n\r\n    const onNextBtnClick = (): void => {\r\n        dispatch(setNextQuestion());\r\n        setState(defaultState);\r\n    };\r\n\r\n    const getLabelCssClasses = (val: string): string => {\r\n        const classes: string[] = [\"form-check-label\"];\r\n\r\n\r\n        if (state?.submitted) {\r\n            if (question.correct_answer === val) {\r\n                classes.push(\"text-success\");\r\n                if (state?.value === val) {\r\n                    classes.push(\"font-weight-bold\");\r\n                }\r\n            } else {\r\n                classes.push(\"text-danger\");\r\n            }\r\n        }\r\n\r\n        return classes.join(\" \");\r\n    };\r\n\r\n    return <React.Fragment>\r\n        <Header data-test=\"element-header\">\r\n            <h2 className=\"text-center\">{decode(question.category, {level: \"html5\"})}</h2>\r\n        </Header>\r\n        <Main data-test=\"element-main\">\r\n            <div className=\"d-flex flex-column justify-content-center align-items-center v-100 h-100\">\r\n                <div className=\"card w-100\">\r\n                    <div\r\n                        className={\"card-body\" + (state?.submitted ? (state?.value === question.correct_answer ? \" alert-success\" : \" alert-danger\") : '')}>\r\n                        <p className=\"text-center lead\">{decode(question.question, {level: \"html5\"})}</p>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <div>\r\n                                {\r\n                                    [\"True\", \"False\"].map((val: string, i: number) => (\r\n                                        <div className=\"form-check\" key={`${index}-${i}`}>\r\n                                            <input data-test={`cb-input-${i}`} className=\"form-check-input\"\r\n                                                   type=\"radio\"\r\n                                                   name=\"answer\" id={`answer${i}`}\r\n                                                   disabled={state?.submitted}\r\n                                                   value={val} onClick={() => onValueChange(val)}/>\r\n                                            <label\r\n                                                className={getLabelCssClasses(val)}\r\n                                                htmlFor={`answer${i}`}>\r\n                                                {val}\r\n                                            </label>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <p className=\"text-center mt-1\">{index + 1} / {totalQuestions}</p>\r\n            </div>\r\n        </Main>\r\n        <Footer data-test=\"element-footer\">\r\n            {\r\n                state?.submitted ?\r\n                    <button data-test=\"button-next\" className=\"btn btn-primary\"\r\n                            onClick={onNextBtnClick}>NEXT\r\n                    </button> :\r\n                    <button data-test=\"button-submit\" className=\"btn btn-primary\" disabled={state?.disabled}\r\n                            onClick={onSubmitBtnClick}>SUBMIT\r\n                    </button>\r\n            }\r\n        </Footer>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default Quiz;","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {decode} from \"html-entities\";\r\nimport {Footer, Header, Main, StartQuizButton} from \"../components\";\r\nimport {Question} from \"../types\";\r\nimport {getAnswers, getQuestions} from \"../redux/selectors\";\r\nimport Answer from \"../types/answer\";\r\n\r\n/**\r\n * Result component -  renders result page\r\n * @function\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Result = (): JSX.Element => {\r\n    const questions: Question[] = useSelector(getQuestions);\r\n    const answers: Answer[] = useSelector(getAnswers);\r\n    const score: number = answers.reduce((prevScore: number, answer: Answer, index: number) => {\r\n        const question: Question = questions[index];\r\n        const nextScore: number = prevScore + (question?.correct_answer === answer ? 1 : 0);\r\n        return nextScore;\r\n    }, 0);\r\n\r\n    const ResultListItem = ({question, index}: { question: Question, index: number }): JSX.Element => {\r\n        const answer: Answer = answers[index];\r\n        const isCorrect: boolean = question?.correct_answer === answer;\r\n\r\n        return <li key={index}\r\n                   className={\"list-group-item \" + (isCorrect ? \"list-group-item-success\" : \"list-group-item-danger\")}>\r\n            <div className=\"d-flex\">\r\n                <div className=\"mr-2\" style={{fontSize: \"1.2em\"}}><b>{isCorrect ? \"+\" : \"-\"}</b></div>\r\n                <div className=\"flex-1\">{decode(question.question, {level: \"html5\"})}</div>\r\n            </div>\r\n        </li>\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <Header data-test=\"element-header\">\r\n            <div className=\"text-center\">\r\n                <h2>You scored</h2>\r\n                <h2>{score} / {questions.length}</h2>\r\n            </div>\r\n        </Header>\r\n        <Main data-test=\"element-main\">\r\n            <ul className=\"list-group\">\r\n                {\r\n                    questions.map((q: Question, index: number) => (\r\n                        <ResultListItem key={index} question={q} index={index}/>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </Main>\r\n        <Footer data-test=\"element-footer\">\r\n            <StartQuizButton label=\"PLAY AGAIN?\"/>\r\n        </Footer>\r\n    </React.Fragment>\r\n};\r\n\r\nexport default Result;","import React from \"react\";\r\nimport {Footer, Header, Main, StartQuizButton} from \"../components\";\r\n\r\n/**\r\n * Home component - renders home page\r\n * @function\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Home = (): JSX.Element => {\r\n    return <React.Fragment>\r\n        <Header data-test=\"element-header\">\r\n            <h2 className=\"text-center\">Welcome to the Trivia Challenge!</h2>\r\n        </Header>\r\n        <Main data-test=\"element-main\">\r\n            <div\r\n                className=\"d-flex flex-column justify-content-center align-items-center text-center h-100 w-100\">\r\n                <div>\r\n                    <p className=\"lead\">You will be presented with 10 True or False questions.</p>\r\n                    <br/>\r\n                    <p className=\"lead\">Can you score 100%?</p>\r\n                </div>\r\n            </div>\r\n        </Main>\r\n        <Footer data-test=\"element-footer\">\r\n            <StartQuizButton label=\"BEGIN\"/>\r\n        </Footer>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Footer, Header, Main} from \"../components\";\r\n\r\n/**\r\n * Error component -  render error page\r\n * @function\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Error: React.FC = (): JSX.Element => {\r\n    const onBtnClick = (): void => {\r\n        window.location.reload();\r\n    };\r\n\r\n    return <React.Fragment>\r\n        <Header data-test=\"element-header\">\r\n            <h2>Error!</h2>\r\n        </Header>\r\n        <Main data-test=\"element-main\">\r\n            <div\r\n                className=\"d-flex flex-column justify-content-center align-items-center text-center h-100 w-100\">\r\n                <div>\r\n                    <p className=\"lead\">Something went wrong..</p>\r\n                    <br/>\r\n                    <p className=\"lead\">Please reload the page.</p>\r\n                </div>\r\n            </div>\r\n        </Main>\r\n        <Footer data-test=\"element-footer\">\r\n            <button data-test=\"button-reload\" className=\"btn btn-primary\"\r\n                    onClick={onBtnClick}>RELOAD\r\n            </button>\r\n        </Footer>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default Error;","import React from \"react\";\r\nimport {Question, QuizState} from \"../types\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getQuestions, getQuestionsIndex, getQuizState} from \"../redux/selectors\";\r\nimport Quiz from \"./quiz\";\r\nimport Result from \"./result\";\r\nimport Home from \"./home\";\r\nimport Error from \"./error\";\r\n\r\n/**\r\n * Pages component - render appropriate page\r\n * @function\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Pages = (): JSX.Element => {\r\n    const quizState: QuizState = useSelector(getQuizState);\r\n    const questionIndex: number = useSelector(getQuestionsIndex);\r\n    const questions: Question[] = useSelector(getQuestions);\r\n\r\n    switch (quizState) {\r\n        case QuizState.IN_PROGRESS:\r\n            const question: Question | undefined = questions[questionIndex];\r\n            if (question) {\r\n                return <Quiz data-test=\"element-quiz\" question={question} index={questionIndex}\r\n                             totalQuestions={questions.length}/>;\r\n            } else {\r\n                return <Error data-test=\"element-error\"/>;\r\n            }\r\n        case QuizState.DONE:\r\n            return <Result data-test=\"element-result\"/>\r\n        default:\r\n            return <Home data-test=\"element-home\"/>\r\n    }\r\n};\r\n\r\nexport default Pages;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNoServerError} from \"./redux/actions\";\r\nimport {getFetchState, hasServerError} from \"./redux/selectors\";\r\nimport {Loader, ToastMessage} from \"./components\";\r\nimport {FetchState} from \"./types\";\r\nimport Pages from \"./pages\";\r\n\r\n/**\r\n * App component - renders app\r\n * @function App\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nexport const App = (): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const serverError: boolean = useSelector(hasServerError);\r\n    const fetchState: FetchState = useSelector(getFetchState);\r\n\r\n    return (\r\n        <div data-test=\"component-app\" className=\"w-100 h-100 d-flex flex-column\">\r\n            {fetchState === FetchState.FETCH_QUESTIONS ? <Loader data-test=\"element-loader\"/> :\r\n                <Pages data-test=\"element-pages\"/>}\r\n            {serverError ?\r\n                <ToastMessage data-test=\"toast-message-element\" header=\"Error!\" body=\"Server error!\"\r\n                              onClose={() => dispatch(setNoServerError())}/>\r\n                : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ActionTypes} from \"../types\";\r\nimport {FETCH_QUESTIONS_SUCCESS, SET_ANSWER} from \"../action-types\";\r\nimport Answer from \"../../types/answer\";\r\n\r\nconst initialState: Answer[] = [];\r\n\r\n/**\r\n * @function AnswersReducer\r\n *\r\n * @param {Answer[]} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {Answer[]} - New state.\r\n */\r\nconst AnswersReducer = (state: Answer[] = initialState, action: ActionTypes): Answer[] => {\r\n    switch (action.type) {\r\n        case FETCH_QUESTIONS_SUCCESS:\r\n            return Array.from({length: action.payload.length}).map(() => null);\r\n        case SET_ANSWER:\r\n            const {index, answer} = action.payload;\r\n            const newAnswers = [...state];\r\n            newAnswers[index] = answer;\r\n            return newAnswers;\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default AnswersReducer;","import {FETCH_QUESTIONS, FETCH_QUESTIONS_SERVER_ERROR, FETCH_QUESTIONS_SUCCESS} from \"../action-types\";\nimport {ActionTypes} from \"../types\";\nimport {FetchState} from \"../../types\";\n\nconst initialState: FetchState = FetchState.NO_STATE;\n\n/**\n * @function FetchStateReducer\n *\n * @param {FetchState} state - State before reducer.\n * @param {ActionTypes} action - Action sent to reducer.\n *\n * @returns {FetchState} - New state.\n */\nconst FetchStateReducer = (state: FetchState = initialState, action: ActionTypes): FetchState => {\n    switch (action.type) {\n        case FETCH_QUESTIONS:\n            return FetchState.FETCH_QUESTIONS;\n        case FETCH_QUESTIONS_SERVER_ERROR:\n            return FetchState.FETCH_QUESTIONS_SERVER_ERROR;\n        case FETCH_QUESTIONS_SUCCESS:\n            return FetchState.FETCH_QUESTIONS_SUCCESS;\n        default:\n            return state;\n    }\n};\n\nexport default FetchStateReducer;\n","import {ActionTypes} from \"../types\";\r\nimport {NEXT_QUESTION, QUIZ_START} from \"../action-types\";\r\n\r\n/**\r\n * @function QuestionIndexReducer\r\n *\r\n * @param {number} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {number} - New state.\r\n */\r\nconst QuestionIndexReducer = (state: number = 0, action: ActionTypes): number => {\r\n    switch (action.type) {\r\n        case QUIZ_START:\r\n            return 0;\r\n        case NEXT_QUESTION:\r\n            return ++state;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default QuestionIndexReducer;","import {Question} from \"../../types\";\r\nimport {ActionTypes} from \"../types\";\r\nimport {FETCH_QUESTIONS_SUCCESS} from \"../action-types\";\r\n\r\nconst initialState: Question[] = [];\r\n\r\n/**\r\n * @function QuestionsReducer\r\n *\r\n * @param {Question[]} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {Question[]} - New state.\r\n */\r\nconst QuestionsReducer = (state: Question[] = initialState, action: ActionTypes): Question[] => {\r\n    switch (action.type) {\r\n        case FETCH_QUESTIONS_SUCCESS:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default QuestionsReducer;","import {QUIZ_END, QUIZ_START} from \"../action-types\";\nimport {ActionTypes} from \"../types\";\nimport {QuizState} from \"../../types\";\n\nconst initialState: QuizState = QuizState.NOT_STARTED;\n\n/**\n * @function QuizStateReducer\n *\n * @param {QuizState} state - State before reducer.\n * @param {ActionTypes} action - Action sent to reducer.\n *\n * @returns {QuizState} - New state.\n */\nconst QuizStateReducer = (state: QuizState = initialState, action: ActionTypes): QuizState => {\n    switch (action.type) {\n        case QUIZ_START:\n            return QuizState.IN_PROGRESS;\n        case QUIZ_END:\n            return QuizState.DONE;\n        default:\n            return state;\n    }\n};\n\nexport default QuizStateReducer;\n","import {FETCH_QUESTIONS_SERVER_ERROR, NO_SERVER_ERROR, SERVER_ERROR} from \"../action-types\";\r\nimport {ActionTypes} from \"../types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\n/**\r\n * @function ServerErrorReducer\r\n *\r\n * @param {boolean} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {boolean} - New state.\r\n */\r\nconst ServerErrorReducer = (state: boolean = initialState, action: ActionTypes): boolean => {\r\n    switch (action.type) {\r\n        case FETCH_QUESTIONS_SERVER_ERROR:\r\n        case SERVER_ERROR:\r\n            return true;\r\n        case NO_SERVER_ERROR:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default ServerErrorReducer;\r\n","import {combineReducers} from \"redux\";\nimport AnswersReducer from \"./answers-reducer\";\nimport FetchStateReducer from \"./fetch-state-reducer\";\nimport QuestionIndexReducer from \"./question-index-reducer\";\nimport QuestionsReducer from \"./questions-reducer\";\nimport QuizStateReducer from \"./quiz-state-reducer\";\nimport ServerErrorReducer from \"./server-error-reducer\";\n\nexport default combineReducers({\n    answers: AnswersReducer,\n    fetchState: FetchStateReducer,\n    questionIndex: QuestionIndexReducer,\n    questions: QuestionsReducer,\n    quizState: QuizStateReducer,\n    serverError: ServerErrorReducer,\n});\n","import {applyMiddleware, createStore} from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nexport const middlewares = [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n\nconst store = createStoreWithMiddleware(rootReducer);\nexport type RootState = ReturnType<typeof store.getState>;\nexport default store;\n","import {ReportHandler} from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}